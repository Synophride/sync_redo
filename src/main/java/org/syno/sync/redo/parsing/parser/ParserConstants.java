/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package org.syno.sync.redo.parsing.parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

	/** RegularExpression Id. */
	int AFFECT = 21;
	/** RegularExpression Id. */
	int AND = 5;
	/** RegularExpression Id. */
	int ARROW = 19;
	/** RegularExpression Id. */
	int BOOL = 33;
	/** RegularExpression Id. */
	int COLON = 24;
	/** RegularExpression Id. */
	int COMMA = 23;
	/** RegularExpression Id. */
	int CONST_BOOL = 32;
	/** RegularExpression Id. */
	int CONST_FLOAT = 30;
	/** RegularExpression Id. */
	int CONST_INT = 29;
	/** Lexical state. */
	int DEFAULT = 0;
	/** RegularExpression Id. */
	int DIGIT = 31;
	/** RegularExpression Id. */
	int DIV = 17;
	/** RegularExpression Id. */
	int ELSE = 38;
	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int EQUAL = 8;
	/** RegularExpression Id. */
	int EVERY = 43;
	/** RegularExpression Id. */
	int GE = 10;
	/** RegularExpression Id. */
	int GT = 9;
	/** RegularExpression Id. */
	int IDENT = 44;
	/** RegularExpression Id. */
	int IF = 36;
	/** RegularExpression Id. */
	int IMPL = 20;
	/** RegularExpression Id. */
	int INT = 34;
	/** RegularExpression Id. */
	int LBRACKET = 27;
	/** RegularExpression Id. */
	int LE = 12;
	/** RegularExpression Id. */
	int LPAR = 25;
	/** RegularExpression Id. */
	int LT = 11;
	/** RegularExpression Id. */
	int MINUS = 15;
	/** RegularExpression Id. */
	int MOD = 18;
	/** RegularExpression Id. */
	int MULTIPLY = 16;
	/** RegularExpression Id. */
	int NEQ = 13;
	/** RegularExpression Id. */
	int NODE = 39;
	/** RegularExpression Id. */
	int NOT = 7;
	/** RegularExpression Id. */
	int OR = 6;
	/** RegularExpression Id. */
	int PLUS = 14;
	/** RegularExpression Id. */
	int PRE = 40;
	/** RegularExpression Id. */
	int RBRACKET = 28;
	/** RegularExpression Id. */
	int REAL = 35;
	/** RegularExpression Id. */
	int RETURNS = 41;
	/** RegularExpression Id. */
	int RPAR = 26;
	/** RegularExpression Id. */
	int SEMICOL = 22;
	/** RegularExpression Id. */
	int THEN = 37;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\r\"", "\"\\t\"", "\"\\n\"", "\"&&\"", "\"||\"", "\"!\"", "\"==\"",
			"\">\"", "\">=\"", "\"<\"", "\"<=\"", "\"!=\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"%\"", "\"->\"",
			"\"=>\"", "\"=\"", "\";\"", "\",\"", "\":\"", "\"(\"", "\")\"", "\"{\"", "\"}\"", "<CONST_INT>",
			"<CONST_FLOAT>", "<DIGIT>", "<CONST_BOOL>", "\"bool\"", "\"int\"", "\"real\"", "\"if\"", "\"then\"",
			"\"else\"", "\"node\"", "\"pre\"", "\"returns\"", "\"var\"", "\"every\"", "<IDENT>", };

	/** RegularExpression Id. */
	int VAR = 42;

}
