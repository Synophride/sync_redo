/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.syno.sync.redo.parsing.parser;
import org.syno.sync.redo.parsing.ast.*;
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Parser implements ParserConstants {
  public static Program parseAST(String input) throws ParseException
  {
    BufferedReader reader = new BufferedReader(new StringReader(input));
    Parser parser = new Parser(reader);
    Program result = parser.program();
    return result;
  }

  public static Expression parseExpression(String input) throws ParseException
  {
    BufferedReader reader = new BufferedReader(new StringReader(input));
    Parser parser = new Parser(reader);
    return parser.expr();
  }

  public static Program parseFile(String path) throws ParseException, FileNotFoundException
  {
    FileReader f = new FileReader(path);
    Parser parser = new Parser(f);
    return parser.program();
  }

/** PARSING **/
  final public Program program() throws ParseException {
  List < Node > nodes;
    nodes = nodelist();
    jj_consume_token(0);
    {if (true) return new Program(nodes);}
    throw new Error("Missing return statement in function");
  }

  final public List < Node > nodelist() throws ParseException {
  Node node;
  List < Node > nodeList = new ArrayList < Node > ();
    label_1:
    while (true) {
      node = node();
      nodeList.add(node);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
    }
    {if (true) return nodeList;}
    throw new Error("Missing return statement in function");
  }

  final public Node node() throws ParseException {
  String nodeName;
  List < Parameter > inputs;
  List < Parameter > outputs;
  List < Equation > eqList;
  List < Parameter > locals = new ArrayList < Parameter > ();
    jj_consume_token(NODE);
    nodeName = ident();
    jj_consume_token(LPAR);
    inputs = paramList();
    jj_consume_token(RPAR);
    jj_consume_token(RETURNS);
    outputs = nonNullParamList();
    jj_consume_token(SEMICOL);
    if (jj_2_3(2)) {
      jj_consume_token(VAR);
      locals = nonNullParamList();
      if (jj_2_2(2)) {
        jj_consume_token(SEMICOL);
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(LBRACKET);
    eqList = eqList();
    jj_consume_token(RBRACKET);
    {if (true) return new Node(nodeName, inputs, outputs, locals, eqList);}
    throw new Error("Missing return statement in function");
  }

  final public List < Parameter > paramList() throws ParseException {
  List < Parameter > params = new ArrayList < Parameter > ();
    if (jj_2_4(2)) {
      params = nonNullParamList();
    } else {
      ;
    }
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public List < Parameter > nonNullParamList() throws ParseException {
  List < Parameter > params, params2;
    params = param();
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SEMICOL);
      params2 = param();
      for (Parameter p : params2) params.add(p);
    }
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public List < Parameter > param() throws ParseException {
  List < String > identifiers;
  Type type;
    identifiers = nonVoidIdentifierList();
    jj_consume_token(COLON);
    type = type();
    List < Parameter > params = new ArrayList < Parameter > ();
    for (String idt : identifiers)
    params.add(new Parameter(idt, type));
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public List < String > nonVoidIdentifierList() throws ParseException {
  String id1, id2;
  List < String > idList = new ArrayList < String > ();
    id1 = ident();
    idList.add(id1);
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      id2 = ident();
      idList.add(id2);
    }
    {if (true) return idList;}
    throw new Error("Missing return statement in function");
  }

  final public String ident() throws ParseException {
  Token id;
    id = jj_consume_token(IDENT);
    {if (true) return id.image;}
    throw new Error("Missing return statement in function");
  }

  final public Type type() throws ParseException {
    if (jj_2_7(2)) {
      jj_consume_token(BOOL);
    {if (true) return Type.BOOL;}
    } else if (jj_2_8(2)) {
      jj_consume_token(INT);
    {if (true) return Type.INT;}
    } else if (jj_2_9(2)) {
      jj_consume_token(REAL);
    {if (true) return Type.REAL;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List < Equation > eqList() throws ParseException {
  Equation eq;
  List < Equation > lst = new ArrayList < Equation > ();
    label_4:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_4;
      }
      eq = equation();
      lst.add(eq);
    }
    {if (true) return lst;}
    throw new Error("Missing return statement in function");
  }

  final public Equation equation() throws ParseException {
  Pattern patt;
  Expression exp;
    patt = pattern();
    jj_consume_token(AFFECT);
    exp = expr();
    jj_consume_token(SEMICOL);
    {if (true) return new Equation(patt, exp);}
    throw new Error("Missing return statement in function");
  }

  final public Pattern pattern() throws ParseException {
  String ident;
  List < String > strList;
    if (jj_2_11(2)) {
      ident = ident();
      {if (true) return new Pattern(Arrays.asList(ident));}
    } else if (jj_2_12(2)) {
      jj_consume_token(LPAR);
      strList = nonVoidIdentifierList();
      jj_consume_token(RPAR);
      {if (true) return new Pattern(strList);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression expr() throws ParseException {
  Expression e;
    if (jj_2_13(2)) {
      e = everyExp();
    } else if (jj_2_14(2)) {
      e = conditionalExpr();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression conditionalExpr() throws ParseException {
  Expression ebool, ethen, eelse;
    jj_consume_token(IF);
    ebool = expr();
    jj_consume_token(THEN);
    ethen = expr();
    jj_consume_token(ELSE);
    eelse = expr();
    {if (true) return new Conditional(ebool, ethen, eelse);}
    throw new Error("Missing return statement in function");
  }

  final public Expression everyExp() throws ParseException {
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
    e1 = mergeExp();
    label_5:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(EVERY);
      e2 = mergeExp();
      e1 = new BinaryOperatorApplication(BinaryOperator.EVERY, e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

/**
	Syntaxe : MERGE(expr1)(C1 => )Â²
*/
/**
TODO:
	MERGE
	WHEN
**/
  final public Expression mergeExp() throws ParseException {
  Expression e;
    e = orExp();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// Assoc droite ! 
  final public Expression arrowExp() throws ParseException {
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
    e1 = orExp();
    label_6:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_6;
      }
      e2 = orExp();
      e1 = new BinaryOperatorApplication(BinaryOperator.FOLLOWED_BY, e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression orExp() throws ParseException {
  Expression e1, e2;
    e1 = andExp();
    label_7:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(OR);
      e2 = andExp();
      e1 = new BinaryOperatorApplication(BinaryOperator.OR, e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression andExp() throws ParseException {
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
    e1 = equalExp();
    label_8:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(AND);
      e2 = equalExp();
      e1 = new BinaryOperatorApplication(BinaryOperator.AND, e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression equalExp() throws ParseException {
  Expression e1, e2;
    e1 = compExp();
    label_9:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_20(2)) {
        jj_consume_token(EQUAL);
        e2 = compExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.EQ, e1, e2);
      } else if (jj_2_21(2)) {
        jj_consume_token(NEQ);
        e2 = compExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.NEQ, e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression compExp() throws ParseException {
  Expression e1, e2;
    e1 = addExp();
    label_10:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_10;
      }
      if (jj_2_23(2)) {
        jj_consume_token(GT);
        e2 = addExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.GREATER_THAN, e1, e2);
      } else if (jj_2_24(2)) {
        jj_consume_token(GE);
        e2 = addExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.GREATER_OR_EQUAL, e1, e2);
      } else if (jj_2_25(2)) {
        jj_consume_token(LT);
        e2 = addExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.LESSER_THAN, e1, e2);
      } else if (jj_2_26(2)) {
        jj_consume_token(LE);
        e2 = addExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.LESSER_OR_EQUAL, e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression addExp() throws ParseException {
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
    e1 = multExp();
    label_11:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_11;
      }
      if (jj_2_28(2)) {
        jj_consume_token(PLUS);
        e2 = multExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.PLUS, e1, e2);
      } else if (jj_2_29(2)) {
        jj_consume_token(MINUS);
        e2 = multExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.MINUS, e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multExp() throws ParseException {
  Expression e1, e2;
    e1 = unaryOpExp();
    label_12:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_12;
      }
      if (jj_2_31(2)) {
        jj_consume_token(MULTIPLY);
        e2 = unaryOpExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.MULT, e1, e2);
      } else if (jj_2_32(2)) {
        jj_consume_token(DIV);
        e2 = unaryOpExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.DIV, e1, e2);
      } else if (jj_2_33(2)) {
        jj_consume_token(MOD);
        e2 = unaryOpExp();
        e1 = new BinaryOperatorApplication(BinaryOperator.MOD, e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  // + - MULT DIV MOD
  final public Expression unaryOpExp() throws ParseException {
  Expression e;
  List < UnaryOperator > l = new LinkedList < UnaryOperator > ();
    label_13:
    while (true) {
      if (jj_2_34(2)) {
        ;
      } else {
        break label_13;
      }
      if (jj_2_35(2)) {
        jj_consume_token(PRE);
        l.add(0, UnaryOperator.PRE);
      } else if (jj_2_36(2)) {
        jj_consume_token(NOT);
        l.add(0, UnaryOperator.NOT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    e = simpleExpr();
    for (UnaryOperator op : l)
    e = new UnaryOperatorApplication(op, e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression simpleExpr() throws ParseException {
  Expression e;
    if (jj_2_37(2)) {
      e = constant();
    } else if (jj_2_38(2)) {
      jj_consume_token(LPAR);
      e = expr();
      jj_consume_token(RPAR);
    } else if (jj_2_39(2)) {
      e = nodeCall();
    } else if (jj_2_40(2)) {
      e = identifier();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENT);
    {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Expression nodeCall() throws ParseException {
  Token id;
  List < Expression > expList;
    id = jj_consume_token(IDENT);
    jj_consume_token(LPAR);
    expList = expList();
    jj_consume_token(RPAR);
    {if (true) return new NodeCall(id.image, expList);}
    throw new Error("Missing return statement in function");
  }

  final public List < Expression > expList() throws ParseException {
  List < Expression > l = new ArrayList < Expression > ();
  Expression e;
    e = expr();
    l.add(e);
    label_14:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(COMMA);
      e = expr();
      l.add(e);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression constant() throws ParseException {
  Token t;
    if (jj_2_42(2)) {
      t = jj_consume_token(CONST_BOOL);
      {if (true) return new ConstBool(t.image);}
    } else if (jj_2_43(2)) {
      t = jj_consume_token(CONST_INT);
      {if (true) return new ConstInt(t.image);}
    } else if (jj_2_44(2)) {
      t = jj_consume_token(CONST_FLOAT);
      {if (true) return new ConstFloat(t.image);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(CONST_BOOL)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(EVERY)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(NODE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(AFFECT)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(SEMICOL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(CONST_FLOAT)) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(PRE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(CONST_INT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[44];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
