/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  LOOKAHEAD= 30;


  static = false;
  FORCE_LA_CHECK = true;
  CHOICE_AMBIGUITY_CHECK = 5;
}

PARSER_BEGIN(Parser)
package org.syno.sync.redo.parsing.parser;
import org.syno.sync.redo.parsing.ast.*;
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.StringReader;
import java.io.BufferedReader;

public class Parser
{
  public static Program parseAST(String input) throws ParseException
  {
    BufferedReader reader = new BufferedReader(new StringReader(input));
    Parser parser = new Parser(reader);
    Program result = parser.program();
    return result;
  }

  public static Expression parseExpression(String input) throws ParseException
  {
    BufferedReader reader = new BufferedReader(new StringReader(input));
    Parser parser = new Parser(reader);
    return parser.expr();
  }
}

PARSER_END(Parser)

/**
* PARTIE «LEXING»
**/

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
| < EQUAL : "==" >
| < GT : ">" >
| < GE : ">=" >
| < LT : "<" >
| < LE : "<=" >
| < NEQ : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < ARROW : "->" >
| < IMPL : "=>" >
| < AFFECT : "=" >
| < SEMICOL : ";" >
| < COMMA : "," >
| < COLON : ":" >
| < LPAR : "(" >
| < RPAR : ")" >
| < LBRACKET : "{" >
| < RBRACKET : "}" >
| < CONST_INT : (< DIGIT >)+ >
| < CONST_FLOAT : (< DIGIT >)+ "." (< DIGIT >)* >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN :
{
  < CONST_BOOL :
    "true"
  | "false" >
| < BOOL : "bool" >
| < INT : "int" >
| < REAL : "real" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < NODE : "node" >
| < PRE : "pre" >
| < RETURNS : "returns" >
| < VAR : "var" >
| < EVERY : "every" >
}

TOKEN :
{
  < IDENT :
    (
      [ "a"-"z" ]
    | [ "A"-"Z" ]
    | "_"
    )+ >
}

/** PARSING **/

Program program() :
{
  List < Node > nodes;
}
{
  nodes = nodelist() < EOF >
  {
    return new Program(nodes);
  }
}

List < Node > nodelist() :
{
  Node node;
  List < Node > nodeList = new ArrayList < Node > ();
}
{
  (
    node = node()
    {
      nodeList.add(node);
    }
  )*
  {
    return nodeList;
  }
}

Node node() :
{
  String nodeName;
  List < Parameter > inputs;
  List < Parameter > outputs;
  List < Equation > eqList;
  List < Parameter > locals = new ArrayList < Parameter > ();
}
{
  < NODE > nodeName = ident() 
  < LPAR > inputs = paramList() < RPAR > 
  < RETURNS > outputs = nonNullParamList()
  (
    < VAR > locals = nonNullParamList()
  )?
  < LBRACKET > eqList = eqList() < RBRACKET >
  {
    return new Node(nodeName, inputs, outputs, locals, eqList);
  }
}

List < Parameter > paramList() :
{
  List < Parameter > paramList;
}
{
  paramList = nonNullParamList()
  {
    return paramList;
  }
|
  {
    return new ArrayList < Parameter > ();
  }
}

List < Parameter > nonNullParamList() :
{
  List < Parameter > params, params2;
}
{
  params = param()
  (
    < SEMICOL > params2 = param()
    {
      for (Parameter p : params2) params.add(p);
    }
  )*
  {
    return params;
  }
}

List < Parameter > param() :
{
  List < String > identifiers;
  Type type;
}
{
  identifiers = nonVoidIdentifierList() < COLON > type = type()
  {
    List < Parameter > params = new ArrayList < Parameter > ();
    for (String idt : identifiers) 
    params.add(new Parameter(idt, type));
    return params;
  }
}

List < String > nonVoidIdentifierList() :
{
  String id1, id2;
  List < String > idList = new ArrayList < String > ();
}
{
  id1 = ident()
  {
    idList.add(id1);
  }
  (
    < COMMA > id2 = ident()
    {
      idList.add(id2);
    }
  )*
  {
    return idList;
  }
}

String ident() :
{
  Token id;
}
{
  id = < IDENT >
  {
    return id.image;
  }
}

Type type() :
{}
{
  < BOOL >
  {
    return Type.BOOL;
  }
| < INT >
  {
    return Type.INT;
  }
| < REAL >
  {
    return Type.REAL;
  }
}

List < Equation > eqList() :
{
  Equation eq;
  List < Equation > lst = new ArrayList < Equation > ();
}
{
  (
    eq = equation()
    {
      lst.add(eq);
    }
  )*
  {
    return lst;
  }
}

Equation equation() :
{
  Pattern patt;
  Expression exp;
}
{
  patt = pattern() < AFFECT > exp = expr() < SEMICOL >
  {
    return new Equation(patt, exp);
  }
}

Pattern pattern() :
{
  String ident;
  List < String > strList;
}
{
  ident = ident()
  {
    return new Pattern(Arrays.asList(ident));
  }
  < LPAR > strList = nonVoidIdentifierList() < RPAR >
  {
    return new Pattern(strList);
  }
}

Expression expr() :
{
  Expression e;
}
{
  e = everyExp()
  {
    return e;
  }
| e = conditionalExpr()
  {
    return e;
  }
}

Expression conditionalExpr() :
{
  Expression ebool, ethen, eelse;
}
{
  < IF > ebool = expr() < THEN > ethen = expr() < ELSE > eelse = expr()
  {
    return new Conditional(ebool, ethen, eelse);
  }
}

Expression everyExp() :
{
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
}
{
  e1 = mergeExp()
  (
    < EVERY > e2 = mergeExp()
    {
      e1 = new BinaryOperatorApplication(BinaryOperator.EVERY, e1, e2);
    }
  )*
  {
    return e1;
  }
}

/**
	Syntaxe : MERGE(expr1)(C1 => )²
*/
/**
TODO:
	MERGE
	WHEN
**/
Expression mergeExp() :
{
  Expression e;
}
{
  e = orExp()
  {
    return e;
  }
}

// Assoc droite ! 
Expression arrowExp() :
{
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
}
{
e1 = orExp()

(
  e2 = orExp()
  {
  e1 = new BinaryOperatorApplication(BinaryOperator.FOLLOWED_BY, e1, e2);  
  }
)*

{ return e1; }
}

Expression orExp() :
{
  Expression e1, e2;
}
{
  e1 = andExp()
  (
    < OR > e2 = andExp()
    {
      e1 = new BinaryOperatorApplication(BinaryOperator.OR, e1, e2);
    }
  )*
  {
    return e1;
  }
}

Expression andExp() :
{
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
}
{
  e1 = equalExp()
  (
    < AND > e2 = equalExp()
    {
      e1=new BinaryOperatorApplication(BinaryOperator.AND, e1,e2);
    }
  )*
  {
	return e1;
  }
}

Expression equalExp() :
{
  Expression e1, e2;
}
{
  e1 = compExp()
  (
    (
      < EQUAL > e2 = compExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.EQ, e1, e2);
      }
    )
  |
    (
      < NEQ > e2 = compExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.NEQ, e1, e2);
      }
    )
  )*
  {
    return e1;
  }
}

Expression compExp() :
{
  Expression e1, e2;
}
{
  e1 = addExp()
  (
    (
      < GT > e2 = addExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.GREATER_THAN, e1, e2);
      }
    )
  |
    (
      < GE > e2 = addExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.GREATER_OR_EQUAL, e1, e2);
      }
    )
  |
    (
      < LT > e2 = addExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.LESSER_THAN, e1, e2);
      }
    )
    (
      < LE > e2 = addExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.LESSER_OR_EQUAL, e1, e2);
      }
    )
  )*
  {
    return e1;
  }
}

Expression addExp() :
{
  Expression e1, e2;
  List < Expression > expList = new ArrayList < Expression > ();
}
{
  e1 = multExp()
  (
    (
      < PLUS > e2 = multExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.PLUS, e1, e2);
      }
    )
  |
    (
      < MINUS > e2 = multExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.MINUS, e1, e2);
      }
    )
  )*
  {
    return e1;
  }
}

Expression multExp() :
{
  Expression e1, e2;
}
{
  e1 = unaryOpExp()
  (
    (
      < MULTIPLY > e2 = unaryOpExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.MULT, e1, e2);
      }
    )
  |
    (
      < DIV > e2 = unaryOpExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.DIV, e1, e2);
      }
    )
  |
    (
      < MOD > e2 = unaryOpExp()
      {
        e1 = new BinaryOperatorApplication(BinaryOperator.MOD, e1, e2);
      }
    )
  )*
  {
    return e1;
  }
} // + - MULT DIV MOD

Expression unaryOpExp() :
{
  Expression e;
  List < UnaryOperator > l = new LinkedList < UnaryOperator > ();
}
{
  (
    (
      < PRE >
      {
        l.add(0, UnaryOperator.PRE);
      }
    )
  |
    (
      < NOT >
      {
        l.add(0, UnaryOperator.NOT);
      }
    )
  )*
  e = simpleExpr()
  {
    for (UnaryOperator op : l) 
    e = new UnaryOperatorApplication(op, e);
    return e;
  }
}

Expression simpleExpr() :
{
  Expression e;
}
{
  (
    e = constant()
  | < LPAR > e = expr() < RPAR >
  | e = nodeCall()
  | e = identifier()
  )
  {
    return e;
  }
}

Expression identifier() :
{
  Token t;
}
{
  t = < IDENT >
  {
    return new Identifier(t.image);
  }
}

Expression nodeCall() :
{
  Token id;
  List < Expression > expList;
}
{
  id = < IDENT > < LPAR > expList = expList() < RPAR >
  {
    return new NodeCall(id.image, expList);
  }
}

List < Expression > expList() :
{
  List < Expression > l = new ArrayList < Expression > ();
  Expression e;
}
{
  (
    e = expr() < COMMA > l = expList()
    {
      l.add(e);
      return l;
    }
  )
|
  {
    return l;
  }
}

Expression constant() :
{
  Token t;
}
{
  (
    t = < CONST_BOOL >
    {
      return new ConstBool(t.image);
    }
  | t = < CONST_INT >
    {
      return new ConstInt(t.image);
    }
  | t = < CONST_FLOAT >
    {
      return new ConstFloat(t.image);
    }
  )
}
